{
    "contents" : "\n\n\n#### code from: http://www.esajournals.org/doi/abs/10.1890/0012-9658%282006%2987%5B842%3AESRAAB%5D2.0.CO%3B2\n#### full article here: http://www.uvm.edu/rsenr/vtcfwru/spreadsheets/occupancy/Occupancy%20Exercises/Exercise15/Dorazio_et_al_2006.pdf\n#### example here http://www.esapubs.org/Archive/ecol/E087/050/suppl-1.htm \n\n\n# library(R2WinBUGS)\n\n# The model\nsink(\"MultiSpeciesSiteOccModel\")\ncat(\"\nmodel {\n\nomega ~ dunif(0,1)\n    \n    psi.mean ~ dunif(0,1)\n    alpha <- log(psi.mean) - log(1-psi.mean)\n    \n    theta.mean ~ dunif(0,1)\n    beta <- log(theta.mean) - log(1-theta.mean)\n    \n    tau.u ~ dgamma(0.1,0.1)\n    tau.v ~ dgamma(0.1,0.1)\n    rho ~ dunif(-1,1)\n    var.eta <- tau.v/(1.-pow(rho,2))\n    \n    sigma.u <- 1/sqrt(tau.u)\n    sigma.v <- 1/sqrt(tau.v)\n    \n    \n    for (i in 1:(n+nzeroes)) {\n    w[i] ~ dbin(omega, 1)\n    phi[i] ~ dnorm(alpha, tau.u)\n    \n    mu.eta[i] <- beta + (rho*sigma.v/sigma.u)*(phi[i] - alpha)\n    eta[i] ~ dnorm(mu.eta[i], var.eta)\n    \n    \n    logit(psi[i]) <- phi[i]\n    logit(theta[i]) <- eta[i]\n    \n    mu.psi[i] <- psi[i]*w[i]\n    for (j in 1:J) {\n    Z[i,j] ~ dbin(mu.psi[i], 1)\n    mu.theta[i,j] <- theta[i]*Z[i,j]\n    X[i,j] ~ dbin(mu.theta[i,j], K)\n    }\n    }\n    \n    n0 <- sum(w[(n+1):(n+nzeroes)])\n    N <- n + n0\n    }\n    \", fill=TRUE)\nsink()\n\n############################\n\nMultiSpeciesSiteOcc <- function(nrepls, X) {\n  \n  start.time = Sys.time()\n  \n  # augment data matrix with an arbitrarily large number of zero row vectors\n  nzeroes = 100\n  n = dim(X)[1]\n  nsites = dim(X)[2]\n  Xaug = rbind(X, matrix(0, nrow=nzeroes, ncol=nsites))\n  \n  # create arguments for bugs()\n  sp.data = list(n=n, nzeroes=nzeroes, J=nsites, K=nrepls, X=Xaug)\n  \n  sp.params = list('alpha', 'beta', 'rho', 'sigma.u', 'sigma.v', 'omega', 'N')\n  \n  sp.inits = function() {\n    omegaGuess = runif(1, n/(n+nzeroes), 1)\n    psi.meanGuess = runif(1, .25,1)\n    theta.meanGuess = runif(1, .25,1)\n    rhoGuess = runif(1, 0,1)\n    sigma.uGuess = 1\n    sigma.vGuess = 1\n    list(omega=omegaGuess, psi.mean=psi.meanGuess, theta.mean=theta.meanGuess, tau.u=1/(sigma.uGuess^2), tau.v=1/(sigma.vGuess^2), rho=rhoGuess,\n         w=c(rep(1, n), rbinom(nzeroes, size=1, prob=omegaGuess)),\n         phi=rnorm(n+nzeroes, log(psi.meanGuess/(1.-psi.meanGuess)), sigma.uGuess),\n         eta=rnorm(n+nzeroes, log(theta.meanGuess/(1.-theta.meanGuess)), sigma.vGuess),\n         Z = matrix(rbinom((n+nzeroes)*nsites, size=1, prob=psi.meanGuess), nrow=(n+nzeroes))\n    )\n  }\n  \n  # fit model to data using WinBUGS code calling openbugs\n  library(R2WinBUGS)\n    \n  fit = bugs(sp.data, sp.inits, sp.params,\n             model.file='MultiSpeciesSiteOccModel',# debug=F, \n             n.chains=5, n.iter=55000, n.burnin=500, n.thin=50,\n             program=\"openbugs\")\n  \n\n# # OpenBugs\n#   library (\"BRugs\")\n#   fit = BRugsFit(data=sp.data, inits=sp.inits, parametersToSave=sp.params,\n#              modelFile='MultiSpeciesSiteOccModel', coda = TRUE,\n#              DIC = TRUE, \n#              numChains=4, nIter=5500, nBurnin=500, nThin=50)\n#              \n\n# # Parameters monitored\n# sp.params = c('alpha', 'beta', 'rho', 'sigma.u', 'sigma.v', 'omega', 'N')\n\n# \n# \n# # MCMC settings\n# ni <- 5500\n# nt <- 50\n# nb <- 500\n# nc <- 3\n# \n#    # library(\"rjags\")\n#    library(R2jags)\n#    fit <- jags(data=sp.data,  parameters.to.save = sp.params, \n#                model.file = \"MultiSpeciesSiteOccModel\", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())\n#    \n\n  \n  end.time = Sys.time()\n  elapsed.time = difftime(end.time, start.time, units='mins')\n  cat(paste(paste('Posterior computed in ', elapsed.time, sep=''), ' minutes\\n', sep=''))\n  \n  list(fit=fit, data=sp.data, X=X)\n}\n\n##############################\n# Cum Num Species Present ###\n###############################\n\nCumNumSpeciesPresent = function(nsites, alpha, sigmaU, N) {\n  \n  # Computes a sample of the posterior-predictive distribution of the (cumulative) number of species present at nsites.\n  \n  # compute posterior predictions of species occurrence probabilities\n  ndraws = length(alpha)\n  Nmax = max(N)\n  logitPsi = matrix(NA, nrow=ndraws, ncol=Nmax)\n  psi = logitPsi\n  for (i in 1:ndraws) {\n    logitPsi[i,1:N[i]] = rnorm(N[i], mean=alpha[i], sd=sigmaU[i])\n    psi[i, 1:N[i]] = 1/(1+exp(-logitPsi[i,1:N[i]]))\n  }\n  \n  # compute posterior predictions of species presence at each site\n  z = array(NA, dim=c(ndraws, Nmax, nsites))\n  for (i in 1:ndraws) {\n    for (j in 1:N[i]) {\n      z[i,j, ] = rbinom(nsites, size=1, prob=psi[i,j])\n    }\n  }\n  \n  # compute posterior predictions of cumulative number of species present\n  M = matrix(NA, nrow=ndraws, ncol=nsites)\n  for (i in 1:ndraws) {\n    for (j in 1:nsites) {\n      zsum = rep(NA, N[i])\n      if (j>1) {\n        zsum = apply(z[i, 1:N[i], 1:j], 1, sum)\n      }\n      else {\n        zsum = z[i, 1:N[i], 1]\n      }\n      M[i,j] = sum(zsum>0)\n    }\n  }\n  \n  # compute summary stats for plotting\n  nSpeciesPresent = matrix(NA, nrow=3, ncol=nsites)\n  for (j in 1:nsites) {\n    x = M[,j]\n    nSpeciesPresent[1, j] = mean(x)\n    nSpeciesPresent[2:3, j] = quantile(x, probs=c(.05, .95))\n  }\n  \n  # plot results\n  ylimits = c(min(nSpeciesPresent[2,]), max(nSpeciesPresent[3,]))\n  plot(1:nsites, nSpeciesPresent[1,], pch=16, ylim=ylimits, type='b',\n       xlab='Number of sampled plots', ylab='Number of species', las=1, cex.axis=1.2, cex.lab=1.5, cex=1.5)\n  segments(1:nsites, nSpeciesPresent[2,], 1:nsites, nSpeciesPresent[3,])\n  \n  list(meanAndquantiles=nSpeciesPresent, summaryStats=summary(M))\n}\n\n\n\n\n# \n# ##########################\n# #  apply model ###########\n# #########################\n# \n# X1 = as.matrix(read.csv(\"data/PS1.csv\"))\n# nrepls = 12\n# algas = MultiSpeciesSiteOcc(nrepls, X1)\n# \n# algas$fit\n# library(mcmcplots)\n# mcmcplot(algas$fit)\n# \n# alpha.post = algas$fit$sims.matrix[,\"alpha\"]\n# sigmaU.post = algas$fit$sims.matrix[,\"sigma.u\"]\n# N.post = algas$fit$sims.matrix[,\"N\"]\n# \n# nsites = 35\n# CumNumSpeciesPresent(nsites, alpha.post, sigmaU.post, N.post)\n# \n# \n# \n# #########################################\n# ######## from Bayesian Pop Anal. Kery book\n# ########################################\n# \n# # 6.3. Analysis of a real data set: model Mtbh for species richness estimation\n# # Read in data and look at them\n# # p610 <- read.table(\"Data/p610.txt\", header = TRUE)\n# \n# ############### Los ahorcados\n# \n# X1 = as.data.frame(read.csv(\"data/LA2.csv\",header = T))\n# # y <- p610[,5:9]                           # Grab counts\n# y <-  as.data.frame(X1[1:nrow(X1),2:11])\n# y[y > 1] <- 1                             # Counts to det-nondetections\n# C <- sum(apply(y, 1, max)) ; print(C)     # Number of observed species\n# table(apply(y, 1, sum))                   # Capture-frequencies\n# \n# \n# \n# # Use Augmented data set from Xaug\n# # y<- Xaug\n# # Augment data set by 150 potential individuals\n# nz <- 150\n# aug<-array(0,c(nz, ncol(y)))\n# colnames(aug)<-colnames(y)\n# yaug.la <- rbind(y, aug)\n# \n# # Specify model in BUGS language\n# sink(\"M_tbh.jags\")\n# cat(\"\n#     model {\n#     \n#     # Priors\n#     omega ~ dunif(0, 1)\n#     for  (j in 1:T){\n#     alpha[j] <- log(mean.p[j] / (1-mean.p[j])) # Define logit \n#     mean.p[j] ~ dunif(0, 1)   # Detection intercepts\n#     }\n#     gamma ~ dnorm(0, 0.01)\n#     tau <- 1 / (sd * sd)\n#     sd ~ dunif(0, 3)\n#     \n#     # Likelihood\n#     for (i in 1:M){\n#     z[i] ~ dbern(omega)\n#     eps[i] ~ dnorm(0, tau)T(-16, 16)\n#     \n#     # First occasion: no term for recapture (gamma)\n#     y[i,1] ~ dbern(p.eff[i,1])\n#     p.eff[i,1] <- z[i] * p[i,1]\n#     p[i,1] <- 1 / (1 + exp(-lp[i,1]))\n#     lp[i,1] <- alpha[1] + eps[i]\n#     \n#     # All subsequent occasions: includes recapture term (gamma)\n#     for (j in 2:T){\n#     y[i,j] ~ dbern(p.eff[i,j])\n#     p.eff[i,j] <- z[i] * p[i,j]\n#     p[i,j] <- 1 / (1 + exp(-lp[i,j]))   \n#     lp[i,j] <- alpha[j] + eps[i] + gamma * y[i,(j-1)]\n#     } #j\n#     } #i\n#     \n#     # Derived quantities\n#     N <- sum(z[])\n#     } \n#     \",fill = TRUE)\n# sink()\n# \n# # Bundle data\n# win.data.la <- list(y = as.matrix(yaug.la), M = nrow(yaug.la), T = ncol(yaug.la))\n# \n# # Initial values\n# inits <- function() list(z = rep(1, nrow(yaug.la)), sd = runif(1, 0.1, 0.9))\n# \n# # Parameters monitored\n# params <- c(\"N\", \"mean.p\", \"gamma\", \"sd\", \"omega\", \"alpha\")\n# \n# # MCMC settings\n# ni <- 50000\n# nt <- 4\n# nb <- 10000\n# nc <- 3\n# \n# # Call JAGS from R (BRT 24 min)\n# out.la <- jags(win.data.la, inits, params, \"M_tbh.jags\", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())\n# \n# # Summarize posteriors and plot posterior for N\n# print(out.la, dig = 3)\n# par(mfrow = c(2,1))\n# hist(out.la$BUGSoutput$sims.list$N, breaks = 25, col = \"gray\", main = \"\", xlab = \"Community size LA\", las = 1, xlim = c(10, 35), freq = FALSE)\n# abline(v = C, col = \"red\", lwd = 4)\n# \n# \n# ########################## Otro sitio\n# \n# X2 = as.data.frame(read.csv(\"data/PS2.csv\",header = T))\n# # y <- p610[,5:9]                           # Grab counts\n# y <-  as.data.frame(X2[1:nrow(X2),2:10])\n# y[y > 1] <- 1                             # Counts to det-nondetections\n# C <- sum(apply(y, 1, max)) ; print(C)     # Number of observed species\n# table(apply(y, 1, sum))                   # Capture-frequencies\n# \n# \n# \n# # Use Augmented data set from Xaug\n# # y<- Xaug\n# # Augment data set by 150 potential individuals\n# nz <- 150\n# aug<-array(0,c(nz, ncol(y)))\n# colnames(aug)<-colnames(y)\n# yaug.ps <- rbind(y, aug)\n# \n# \n# # Bundle data\n# win.data.ps <- list(y = as.matrix(yaug.ps), M = nrow(yaug.ps), T = ncol(yaug.ps))\n# \n# # Initial values\n# inits <- function() list(z = rep(1, nrow(yaug.ps)), sd = runif(1, 0.1, 0.9))\n# \n# # Call JAGS from R (BRT 24 min)\n# out.ps <- jags(win.data.ps, inits, params, \"M_tbh.jags\", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())\n# \n# # Summarize posteriors and plot posterior for N\n# print(out.ps, dig = 3)\n# #par(mfrow = c(2,1))\n# hist(out.ps$BUGSoutput$sims.list$N, breaks = 20, col = \"gray\", main = \"\", xlab = \"Community size PS\", las = 1, xlim = c(10, 35), freq = FALSE)\n# abline(v = C, col = \"red\", lwd = 4)\n# \n# \n# #######################\n# ### END \n# #######################\n# \n# #### Graficar acumulacion\n# \n# alpha.post.ps = out.ps$BUGSoutput$sims.matrix[,\"alpha\"]\n# sigmaU.post.ps = out.ps$BUGSoutput$sims.matrix[,\"gamma\"]\n# N.post.ps = out.ps$BUGSoutput$sims.matrix[,\"N\"]\n# \n# nsites = 30\n# CumNumSpeciesPresent(nsites, alpha.post.ps, sigmaU.post.ps, N.post.ps)\n# \n# #### Graficar acumulacion\n# \n# alpha.post.la = out.la$BUGSoutput$sims.matrix[,\"alpha\"]\n# sigmaU.post.la = out.la$BUGSoutput$sims.matrix[,\"gamma\"]\n# N.post.la = out.la$BUGSoutput$sims.matrix[,\"N\"]\n# \n# nsites = 30\n# CumNumSpeciesPresent(nsites, alpha.post.la, sigmaU.post.la, N.post.la)\n# \n# \n# \n# \n# # Define model\n# sink(\"M0.jags\")\n# cat(\"\n#     model {\n#     \n#     # Priors\n#     omega ~ dunif(0, 1)\n#     p ~ dunif(0, 1)\n#     \n#     # Likelihood\n#     for (i in 1:M){\n#     z[i] ~ dbern(omega)\n#     for (j in 1:T){\n#     y[i,j] ~ dbern(p.eff[i,j])\n#     p.eff[i,j] <- z[i] * p\n#     } #j\n#     } #i\n#     \n#     # Derived quantities\n#     N <- sum(z[])\n#     } # end model\n#     \",fill = TRUE)\n# sink()\n# \n# # Initial values\n# inits <- function() list(z = rep(1, nrow(yaug)))\n# \n# # Define parameters to be monitored\n# params <- c(\"N\", \"p\", \"omega\")\n# \n# # MCMC settings\n# ni <- 5000#0\n# nt <- 4\n# nb <- 1000#0\n# nc <- 3\n# \n# # Call JAGS from R (BRT 1 min)\n# out0 <- jags(win.data, inits, params, \"M0.jags\", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb,  working.directory = getwd())\n# \n# \n# # Summarize posteriors and plot posterior for N\n# print(out0, dig = 3)\n# par(mfrow = c(1,2))\n# hist(out0$BUGSoutput$sims.list$N, breaks = 10, col = \"gray\", main = \"\", xlab = \"Community size\", las = 1, xlim = c(15, 40), freq = FALSE)\n# abline(v = C, col = \"black\", lwd = 3)\n# \n# \n",
    "created" : 1432504158738.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1116813433",
    "id" : "91516D80",
    "lastKnownWriteTime" : 1432540547,
    "path" : "~/CodigoR/Nancy/code/MultiSpeciesSiteOcc.R",
    "project_path" : "code/MultiSpeciesSiteOcc.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}